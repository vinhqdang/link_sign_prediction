z
}
# update the lnL by using the result of "split2cls()"
# continue: no update
# org.lnL: original lnL vector
# divided.lnL: divided lnL vector having 2 elements.
updtlnL <- function(continue, org.lnL, k1, k2, divided.lnL){
if (!is.vector(org.lnL))
return(divided.lnL)
if (!continue)
return(org.lnL)
if (k1 == k2)
stop("updtlnL() : k1 and k2 should differ.")
z <- NULL
for (i in 1:max(k2, length(org.lnL))){
if (i == k1)
z <- c(z, divided.lnL[1])
else if (i == k2)
z <- c(z, divided.lnL[2])
else
z <- c(z, org.lnL[i])
}
z
}
# update the detVx by using the result of "split2cls()"
# continue: no update
# org.detVx: original detVx vector
# divided.detVx: divided detVx vector having 2 elements.
updtdetVx <- function(continue, org.detVx, k1, k2, divided.detVx){
if (!is.vector(org.detVx))
return(divided.detVx)
if (!continue)
return(org.detVx)
if (k1 == k2)
stop("updtdetVx() : k1 and k2 should differ.")
z <- NULL
for (i in 1:max(k2, length(org.detVx))){
if (i == k1)
z <- c(z, divided.detVx[1])
else if (i == k2)
z <- c(z, divided.detVx[2])
else
z <- c(z, org.detVx[i])
}
z
}
# split 2 clusters if we would prefer it based on BIC
# q: a number of parameters
# bic.prior: BIC which x is given; if bic.prior=NULL then we calculate
# lnL.prior: lnL which x is given; if bic.prior=NULL then we calculate
# detVx.prior: detVx which x is given; if bic.prior=NULL then we calculate
split2cls <- function(x, centers, q, bic.prior, lnL.prior, detVx.prior, iter.max, ignore.covar){
if (is.null(bic.prior)){
pb <- priorBIC(x, centers, q, ignore.covar)
bic.prior <- pb$bic
lnL.prior <- pb$lnL
detVx.prior <- pb$detVx
}
bic.post <- postBICs(x, centers, q, iter.max, ignore.covar)
subcluster <- bic.post$clsub$cluster
#
# compare whether if we should split
if (is.na(bic.post$bic[3])){
# BIC may has NA because of few data
continue <- FALSE
}else if (bic.post$bic[3] < bic.prior){
# splitting ...
# replace the cluster number to cl$cluster
continue <- TRUE
}else{
# not splitting...
# return "subcluster" stored k1
continue <- FALSE
}
# note that "subcluster" gives 1 or 2
list(continue = continue, subcluster = subcluster,
bic.prior = bic.prior, bic.post = bic.post$bic,
lnL.prior = lnL.prior, lnL.post = bic.post$lnL,
detVx.prior = detVx.prior, detVx.post = bic.post$detVx,
centers = bic.post$clsub$centers,
clj1 = bic.post$clj1, clj2 = bic.post$clj2)
}
# return BIC (prior BIC)
priorBIC <- function(x, centers, q, ignore.covar){
lnL0 <- lnL(x, centers, ignore.covar)
bic <- -2 * lnL0$lnL + q * log(nrow(x)) # BIC
# bic <- -2 * lnL0$lnL + q  # AIC
list(lnL = lnL0$lnL, detVx = lnL0$detVx, bic = bic)
}
# return BICs (two posterior BICs)
postBICs <- function(x, centers, q, iter.max, ignore.covar){
#
# split to 2 clusters
clsub <- kmeans(x, 2, iter.max)
y.ok1 <- lapply(clsub$cluster, "==", 1) # 1st sub-cluster or not
y.ok2 <- lapply(clsub$cluster, "==", 2) # 2nd sub-cluster or not
# extract sub data
p <- ncol(x)
clj1 <- matrix(x[as.logical(y.ok1)], ncol=p)
clj2 <- matrix(x[as.logical(y.ok2)], ncol=p)
# ratio for pdf.
r1 <- clsub$size[1] / sum(clsub$size)	# [0,1]
r2 <- 1 - r1 	# [0,1]
# two later BICs
# print(clsub$centers[1,])	# for debug
# print(apply(clj1,2,mean))	# for debug
# print(sqrt(apply(clj1,2,var)))	# for debug
# print(r1)	# for debug
lnL1 <-  lnL(clj1, clsub$centers[1,], ignore.covar)
# print(clsub$centers[2,])	# for debug
# print(apply(clj2,2,mean))	# for debug
# print(sqrt(apply(clj2,2,var)))	# for debug
# print(r2)	# for debug
lnL2 <-  lnL(clj2, clsub$centers[2,], ignore.covar)
n1 <- nrow(clj1)
n2 <- nrow(clj2)
# normalizing factor; dist() is in library(mva)
if (is.na(lnL1$detVx) || is.na(lnL2$detVx))
beta <- 0
else
beta <- dist(clsub$center) / (sqrt(lnL1$detVx + lnL2$detVx))
alpha <- 0.5 / pnorm(beta)
BIC1 <- -2 * lnL1$lnL +q * log(n1)
BIC2 <- -2 * lnL2$lnL +q * log(n2)
# BIC1 <- -2 * lnL1$lnL +q # AIC
# BIC2 <- -2 * lnL2$lnL +q # AIC
# cat (paste("alpha =",alpha,"\n"))	# for debug
# cat (paste("beta =",beta,"\n"))	# for debug
# BIC is not (BIC1 + BIC2)
BIC <- -2 * lnL1$lnL  -2 * lnL2$lnL + 2 * q * log(n1 + n2) - 2 * (n1 + n2) * log(alpha)
# BIC <- -2 * lnL1$lnL  -2 * lnL2$lnL + 2 * q  - 2 * (n1 + n2) * log(alpha) # AIC
list(bic = c(BIC1, BIC2, BIC),
lnL = c(lnL1$lnL, lnL2$lnL),
detVx = c(lnL1$detVx, lnL2$detVx),
clsub = clsub, clj1 = clj1, clj2 = clj2)
}
# return BICs for Two-merged clusters model and devided clusters model
# k1/k2: marged cluster ID
mergedBIC <- function(x, xcl, k1, k2, q, ignore.covar, pr.proc){
# sample size
# check for input data
n1 <- xcl$size[k1]
n2 <- xcl$size[k2]
if (n1 == 0 || n2 == 0){
# already had been merged
cat(paste("already had been merged\n"))
ret <- F
return( list (ret = ret))
}
if (is.null(xcl$lnL[k1]) || is.null(xcl$lnL[k2])){
# lnL may be null because of few data
cat(paste("lnL may be null because of few data\n"))
ret <- F
return( list (ret = ret))
}
# divided clusters model
lnL1 = xcl$lnL[k1]
lnL2 = xcl$lnL[k2]
ctrextrt <- rbind(xcl$centers[k1,], xcl$centers[k2,])
beta <- dist(ctrextrt) / (sqrt(xcl$detVx[k1] + xcl$detVx[k2]))
if (pr.proc) cat(paste("beta=", round (beta, digit=2), "\n"))
# if (beta > 10){
# 	# 2 clusters far apart
# 	ret <- F
# 	return( list (ret = ret))
# }
alpha <- 0.5 / as.numeric(pnorm(beta))
bicdiv <- -2 * lnL1  -2 * lnL2 + 2 * q * log(n1 + n2) - 2 * (n1 + n2) * log(alpha)
# bicdiv <- -2 * lnL1 -2 * lnL2 + 2 * q - 2 * (n1 + n2) * log(alpha) # AIC
# extract 2 clusters data
y.ok1 <- lapply(xcl$cluster, "==", k1) # 1st sub-cluster or not
y.ok2 <- lapply(xcl$cluster, "==", k2) # 2nd sub-cluster or not
# extract sub data
p = ncol(x)
clj1 <- matrix(x[as.logical(y.ok1)], ncol=p)
clj2 <- matrix(x[as.logical(y.ok2)], ncol=p)
xmgd <- rbind(clj1, clj2)
# merged cluster center
ctrmgd <- (n1 * xcl$centers[k1,] + n2 * xcl$centers[k2,]) / (n1 + n2)
lnLmgd <- lnL(xmgd, ctrmgd, ignore.covar)
bicmgd <- -2 * lnLmgd$lnL + q * log(nrow(xmgd)) # BIC
# bicmgd <- -2 * lnLmgd$lnL + q  # AIC
ret <- T
list (ret = ret, ctrmgd = ctrmgd, lnLmgd = lnLmgd$lnL, detVxmgd = lnLmgd$detVx, bicmgd = bicmgd, bicdiv = bicdiv)
}
# log-likelihood under the assumption of
# p-dimensional multivariate normal distribution.
# ignore.covar: ignore the covariance
lnL <- function(x, centers, ignore.covar=T){
x <- as.matrix(x)
p <- ncol(x)	# p-dimensional multivariate
n <- nrow(x)	# sample size
if (missing(centers))
stop("centers must be a number or a matrix")
if (n <= 2)	# few data
return(list(lnL=NA, detVx=NA))
vx <- var(x)	# var-co.var matrix
# print(x)	# for debug
if (p == 1){ # x is vector
invVx <- 1 / as.vector(vx)
detVx <- as.vector(vx)
}else{
if (ignore.covar){
invVx <- diag(1/diag(vx)) # inv. matrix when assuming diag.
detVx <- prod(diag(vx)) # det. when assuming diag.
}else{
invVx <- solve(vx) # inverse matrix of "vx"
y <- chol(vx) # Cholesky decomposition
detVx <- prod(diag(y)) # vx = t(y) %*% y, where y is triangular,
# then, det(vx) = det(t(y)) * det(y)
}
}
t1 <- -p/2 * 1.837877066 # 1.837... = log(2 * 3.1415...)
t2 <- -log(detVx) / 2
xmu <- t(apply(x, 1, "-", centers))
# print(centers)	# for debug
# print(xmu)	# for debug
# s <- 0
# for (i in 1:n)
#	s <- s + t(xmu[i,]) %*% invVx %*% xmu[i,]
if (p == 1){
s <- sum(xmu^2 * invVx)
}else{
s <- sum(apply(xmu, 1, txInvVxX, invVx=invVx))
}
t3 <- -s / 2
ll <- (t1 + t2) * n + as.numeric(t3)	# log likelihood
list(lnL=ll, detVx=detVx)
}
# function for calculation of
# t(xmu[i,]) %*% invVx %*% xmu[i,]
txInvVxX <- function(x, invVx){
t(x) %*% invVx %*% x
}
xmeans(x = rnorm(50, sd=0.3), ik = 4)
matrix(rexp(200), 10)
size <- 20             #length of random number vectors
set.seed(1)
x <- runif(size)          # generate samples from uniform distribution (0.0, 1.0)
y <-runif(size)
df <-data.frame(x,y)
df
xmeans (df, ik=4)
plot (df)
size <- 200             #length of random number vectors
set.seed(1)
x <- runif(size)          # generate samples from uniform distribution (0.0, 1.0)
y <-runif(size)
df <-data.frame(x,y)
xmeans (df, ik=4)
plot (df)
y = xmeans (df, ik=4)
y$cluster
plot (df)
setwd("~/Desktop/API_VNM_DS2_en_csv_v2/")
data = read.csv("API_VNM_DS2_en_csv_v2.csv")
x = 1684
t = 1.05
x*t^10
x*t^50
x*t^100
x*t^50
x*t^60
x*t^70
x*t^65
x*t^65
x=1:12000
y1 = log(x/1000 + 1)
plot (y1~x)
y1 = log(x/1000 + 1)/4
plot (y1~x)
x = seq(1:12000,10)
?seq
x = seq(1,12000,10)
x
y1 = log(x/1000 + 1)/4
plot (y1~x)
x = seq(1,12000,50)
y1 = log(x/1000 + 1)/4
plot (y1~x)
plot (y1~x, type = "l")
x = seq(1,12000,50)
x1 = seq (1,2000,20)
f1 = log (x1/1000 + 1)/4
plot (f1 ~ x)
plot (f1 ~ x1)
f1 = log (x1/1000 + 1)/3
plot (f1 ~ x1)
plot (f1 ~ x1)/1.234
f1 = log (x1/1000 + 1)/1.35
plot (f1 ~ x1)/1.234
plot (f1 ~ x1)
f1 = log (x1/1000 + 1)/1.46
plot (f1 ~ x1)
f1 = log (x1/1000 + 1)/1.623
plot (f1 ~ x1)
length(f1)
?runif
f1 = c(f1, rep(0.65, length(x) - length(f1)))
length(f1)
plot (f1 ~ x)
plot (f1 ~ x, type = l)
plot (f1 ~ x, type = "l")
plot (f1 ~ x, type = "l", col = "red")
f2 = f1 + runif (length(f1), max=0.1,min=-0.1)
plot (f2 ~ x, type = "l", col = "red")
f2 = f1 + rnorm (length(f1), max=0.1,min=-0.1)
?rnorm
f2 = f1 + runif (length(f1), max=0.02,min=-0.05)
plot (f2 ~ x, type = "l", col = "red")
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f1 = log (x1/1000 + 1)/1.623 + 0.18
plot (f1~x1)
plot (f1~x1, ylim=c(0,1))
f1 = log (x1/1000 + 1)/1.913 + 0.18
plot (f1~x1, ylim=c(0,1))
f1 = c(f1, rep(0.65, length(x) - length(f1)))
f2 = f1 + runif (length(f1), max=0.02,min=-0.05)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f1 = log (x1/1000 + 1)/1.983 + 0.18
f1 = c(f1, rep(0.65, length(x) - length(f1)))
f2 = f1 + runif (length(f1), max=0.02,min=-0.05)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f2 = c(log (x1/1000 + 1)/1.983 + 0.18, rep(0.65, length(x) - length(f1))) + runif (length(f1), max=0.02,min=-0.05)
f2 = c(log (x1/1000 + 1)/1.983 + 0.18, rep(0.65, 10000)) + runif (length(f1), max=0.02,min=-0.05)
f2 = c(log (x1/1000 + 1)/1.983, 0.18, rep(0.65, 10000)) + runif (length(f1), max=0.02,min=-0.05)
f2 = c(log (x1/1000 + 1)/1.983 + 0.181, rep(0.65, 10000)) + runif (length(x), max=0.02,min=-0.05)
length(x1)
f2 = c(log (x1/1000 + 1)/1.983 + 0.181, rep(0.65, length(x)-length(x1))) + runif (length(x), max=0.02,min=-0.05)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f2 = c(log (x1/1000 + 1)/2.014 + 0.181, rep(0.65, length(x)-length(x1))) + runif (length(x), max=0.02,min=-0.05)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f2 = c(log (x1/1000 + 1)/2.014 + 0.161, rep(0.65, length(x)-length(x1))) + runif (length(x), max=0.02,min=-0.05)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f2 = c(log (x1/1000 + 1)/2.014 + 0.161, rep(0.65, length(x)-length(x1))) + runif (length(x), max=0.02,min=-0.075)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f2 = c(log (x1/1000 + 1)/2.014 + 0.161, rep(0.65, length(x)-length(x1))) + runif (length(x), max=0.08,min=-0.175)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f2 = c(log (x1/1000 + 1)/2.014 + 0.161, rep(0.65, length(x)-length(x1))) + runif (length(x), max=0.05,min=-0.1)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1), panel.first = grid())
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1), panel.first = grid(), xlab="Training steps", ylab="Accuracy")
f3 = c(log (x1/1000 + 1)/1.874 + 0.1736, rep(0.68, length(x)-length(x1))) + runif (length(x), max=0.05,min=-0.03)
plot (f3~x,add =TRUE, col = "blue")
plot (f3~x,add =TRUE, col = "blue", type = "l")
f3 = c(log (x1/1000 + 1)/1.874 + 0.1736, rep(0.72, length(x)-length(x1))) + runif (length(x), max=0.05,min=-0.03)
f3 = c(log (x1/1000 + 1)/1.874 + 0.1736, rep(0.72, length(x)-length(x1))) + runif (length(x), max=0.05,min=-0.03)
plot (f3~x,add =TRUE, col = "blue", type = "l")
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1), panel.first = grid(), xlab="Training steps", ylab="Accuracy")
lines(f3, add=TRUE)
lines(f3~x, add=TRUE)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1), panel.first = grid(), xlab="Training steps", ylab="Accuracy")
lines(f3~x, add=TRUE)
install.packages("h2o")
df = read.csv("https://goo.gl/uWbihf", sep = ";")
str(df)
df = read.csv("https://goo.gl/uWbihf", sep = ";", header = FALSE)
str(df)
library (h2o)
h2o.shutdown ()
?h2o.gbm
library(h2o)
?h2o.gbm
?h2o.grid
library(h2o)
devtools::install_github("rstudio/tensorflow")
library (tensorflow)
library(reticulate)
use_condaenv("tensorflow")
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
library(tensorflow)
# Create 100 phony x, y data points, y = x * 0.1 + 0.3
x_data <- runif(100, min=0, max=1)
y_data <- x_data * 0.1 + 0.3
# Try to find values for W and b that compute y_data = W * x_data + b
# (We know that W should be 0.1 and b 0.3, but TensorFlow will
# figure that out for us.)
W <- tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0))
b <- tf$Variable(tf$zeros(shape(1L)))
y <- W * x_data + b
# Minimize the mean squared errors.
loss <- tf$reduce_mean((y - y_data) ^ 2)
optimizer <- tf$train$GradientDescentOptimizer(0.5)
train <- optimizer$minimize(loss)
# Launch the graph and initialize the variables.
sess = tf$Session()
sess$run(tf$global_variables_initializer())
# Fit the line (Learns best fit is W: 0.1, b: 0.3)
for (step in 1:201) {
sess$run(train)
if (step %% 20 == 0)
cat(step, "-", sess$run(W), sess$run(b), "\n")
}
tf.__version__
tf$VERSION
tf$Print(train)
library(oce)
install.packages("oce")
library(oce)
## Example 1. color scheme for points on xy plot
x <- seq(0, 1, length.out = 40)
y <- sin(2 * pi * x)
par(mar = c(3, 3, 1, 1))
mar <- par("mar")  # prevent margin creep by drawPalette()
## First, default breaks
c <- Colormap(y)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
plot(x, y, bg = c$zcol, pch = 21, cex = 1)
grid()
## Example 1. color scheme for points on xy plot
x <- seq(0, 1, length.out = 40)
y <- sin(2 * pi * x)
par(mar = c(3, 3, 1, 1))
mar <- par("mar")  # prevent margin creep by drawPalette()
## First, default breaks
c <- colormap(y)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
plot(x, y, bg = c$zcol, pch = 21, cex = 1)
grid()
par(mar = mar)
## Second, 100 breaks, yielding a smoother palette
c <- Colormap(y, breaks = 100)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
plot(x, y, bg = c$zcol, pch = 21, cex = 1)
grid()
par(mar = mar)
## Second, 100 breaks, yielding a smoother palette
c <- colormap(y, breaks = 100)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
plot(x, y, bg = c$zcol, pch = 21, cex = 1)
grid()
c
plot(x, y, bg = c$zcol, pch = 21, cex = 1)
grid()
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
y
y = 1:10
c <- colormap(y)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
dev.off()
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
c
?colormap
y <- c(370,
380,
400,
418,
425,
430,
433,
438,
455,
465,
470,
493,
522)
c <- colormap (y)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
dev.off
dev.off()
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
dev.off()
c <- colormap (y, breaks = 10)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
c <- colormap (y, breaks = 1)
dev.off()
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
c <- colormap(y)
dev.off()
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
max(y)
c
cm <- colormap(name = "gmt_globe")
deep <- cm$x0 < -4000
cm$col0[deep] <- "black"
cm$col1[deep] <- "black"
cm <- Colormap(x0 = cm$x0, x1 = cm$x1, col0 = cm$col0, col1 = cm$col1)
imagep(topoWorld, breaks = cm$breaks, col = cm$col)
cm <- colormap(name = "gmt_globe")
deep <- cm$x0 < -4000
cm$col0[deep] <- "black"
cm$col1[deep] <- "black"
cm <- colormap(x0 = cm$x0, x1 = cm$x1, col0 = cm$col0, col1 = cm$col1)
imagep(topoWorld, breaks = cm$breaks, col = cm$col)
setwd ("~/workspace/link_sign_prediction/baselines/")
time_guha <- read.table("time_guha.txt",TRUE)
time_les <- read.table()
time_les <- read.table("time_leskovec.txt", TRUE)
plot (time_les$learn)
time_guha <- read.table("time_guha.txt",TRUE)
time_les <- read.table("time_leskovec.txt", TRUE)
plot (time_les$learn)
lines (time_guha$Time, col = "red")
plot (time_guha$Time, col = "red")
plot (time_guha$Time, col = "red", ylim = c(0,0.001))
lines (time_les$learn)
plot (time_guha$Time, col = "red", ylim = c(0,0.002))
lines (time_les$learn)
plot (time_guha$Time, col = "red", ylim = c(0,0.005))
lines (time_les$learn)
time_guha <- read.table("time_guha.txt",TRUE)
time_les <- read.table("time_leskovec.txt", TRUE)
plot (time_guha$Time, col = "red", ylim = c(0,0.005))
lines (time_les$learn)
acc_gu <- read.table("acc_guha.txt",TRUE)
acc_le <- read.table("acc_lesk.txt", TRUE)
plot (acc_le$accuracy, ylim = c(0,1))
lines (acc_gu$accuracy)
(acc_gu$accuracy + acc_le$accuracy)/2
